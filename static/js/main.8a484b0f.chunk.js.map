{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodoList","value","onChange","e","currentTarget","onKeyPress","charCode","className","tasks","map","t","key","isDone","type","changeTaskStatus","checked","removeTask","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListId","filteredTasks","task","todoListTasks","newTasks","changeStatus","taskId","find","modifiedTodoList","tl","newTodoLists","allTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8a484b0f.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\n\r\ntype PropsType = {\r\n    id: string,\r\n    title: string,\r\n    tasks: Array<TaskType>,\r\n    removeTask: (taskId: string, todoListId: string) => void,\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void,\r\n    addTask: (title: string, todoListId: string) => void,\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void,\r\n    filter: FilterValuesType,\r\n    removeTodoList: (id: string) => void,\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title.trim(), props.id);\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n    const deleteTodoList = () => props.removeTodoList(props.id);\r\n\r\n\r\n    return <div>\r\n        <h3>{props.title}\r\n            <button onClick={deleteTodoList}>X</button>\r\n        </h3>\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodoListType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType,\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>,\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListId1 = v1();\r\n    const todoListId2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: \"Books\", filter: \"all\"},\r\n        {id: todoListId2, title: \"Songs\", filter: \"active\"},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"Harry Potter\", isDone: true},\r\n            {id: v1(), title: \"Star Wars\", isDone: true},\r\n            {id: v1(), title: \"Finansist\", isDone: false},\r\n            {id: v1(), title: \"3 Friends\", isDone: false},\r\n            {id: v1(), title: \"The Gilded Age\", isDone: false},\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"LP - Numb\", isDone: true},\r\n            {id: v1(), title: \"Korn - Liar\", isDone: true},\r\n            {id: v1(), title: \"Sting - Shape of my heart\", isDone: false},\r\n            {id: v1(), title: \"Tatu - Ne ver\", isDone: false},\r\n            {id: v1(), title: \"dfsdfs\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    // let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        let filteredTasks = tasks[todoListId].filter(t => t.id != id);\r\n        tasks[todoListId] = filteredTasks;\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let todoListTasks = tasks[todoListId];\r\n        let newTasks = [task, ...todoListTasks];\r\n        tasks[todoListId] = newTasks;\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        let todoListTasks = tasks[todoListId];\r\n        let task = todoListTasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n        }\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string,) {\r\n        let modifiedTodoList = todoLists.find(tl => tl.id === todoListId);\r\n        if (modifiedTodoList) {\r\n            modifiedTodoList.filter = value;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n    }\r\n\r\n    const removeTodoList = (id: string) => {\r\n        let newTodoLists = todoLists.filter(tl => tl.id !== id);\r\n        setTodoLists([...newTodoLists]);\r\n        delete tasks[id];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map((tl) => {\r\n                    let allTasks = tasks[tl.id];\r\n                    let tasksForTodolist = allTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = allTasks.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = allTasks.filter(t => t.isDone === true);\r\n                    }\r\n\r\n                    return (<Todolist\r\n                            id={tl.id}\r\n                            key={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            removeTodoList={removeTodoList}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}